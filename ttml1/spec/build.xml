<?xml version="1.0" encoding="UTF-8"?>
<!-- Apache Ant script to build spec.
     Philippe Le Hegaret, W3C -->
      
<project name="TimedText" default="generate" basedir=".">
    <path id="saxon8.classpath">
        <pathelement location="saxon8/saxon8.jar"/>
    </path>
    <property name="html.dir" value="${basedir}"/>
    <property name="html.name" value="ttml1.html"/>
    <property name="stylesheet" value="xmlspec-ttml1.xsl"/>
    <property name="glossary" value="extract-glist.xsl"/>
    <property name="generateBPlist" value="generateBPlist.xsl"/>
    <property name="diffformat" value="diffspec.xsl"/>
    <property name="last-public-draft" value="20070706"/>
    
    <property name="jing.jar" value="${basedir}/jing/jing.jar"/>
    <property name="rnc.dir" value="${basedir}/rnc"/>
    <property name="rnc.schema" value="${rnc.dir}/ttml1.rnc"/>
    <property name="xsd.dir" value="${basedir}/xsd"/>
    <property name="xsd.schema" value="${xsd.dir}/ttml1.xsd"/>
    <property name="profiles.dir" value="${basedir}/profiles"/>
    <property name="examples.dir" value="${basedir}/examples"/>

    <patternset id="escapable">
      <include name="examples/*.xml"/>
      <include name="profiles/*.xml"/>
    </patternset>

    <patternset id="escaped">
      <include name="examples/*.esc"/>
      <include name="profiles/*.esc"/>
    </patternset>

    <target name="clean-escapes" description="Clean escaped entites.">
      <delete quiet="true">
	<fileset dir="${basedir}">
	  <patternset refid="escaped"/>
	</fileset>
      </delete>
    </target>

    <target name="clean" depends="clean-escapes">
        <delete quiet="true" file="${html.name}"/>
    </target>

    <target name="validate-schema-rnc" description="Validates DFXP's RNC Schema.">
        <java fork="true" jar="${jing.jar}" dir="${rnc.dir}">
            <arg value="-c"/>
            <arg value="ttml1.rnc"/>
        </java>
    </target>

    <target name="generate-schema-archive-rnc" description="Generate DFXP's RNC Schema archive." depends="validate-schema-rnc">
        <zip destfile="${rnc.dir}/schema.zip">
            <fileset dir="${rnc.dir}">
                <include name="*.rnc"/>
            </fileset>
        </zip>
    </target>

    <target name="create-xsd-bindings" description="Create JAXB Bindings for DFXP's XSD Schema.">
        <exec executable="xjc" dir="xsd">
          <arg value="-quiet"/>
          <arg value="-b"/>
          <arg value="ttml1-bindings.xjb"/>
          <arg value="ttml1.xsd"/>
        </exec>
    </target>

    <target name="delete-xsd-bindings" description="Delete JAXB Bindings for DFXP's XSD Schema.">
        <delete includeemptydirs="true">
          <fileset dir="xsd/org"/>
        </delete>
    </target>

    <target name="validate-schema-xsd" description="Validates DFXP's XSD Schema using JAXB tool set." depends="create-xsd-bindings, delete-xsd-bindings"/>

    <target name="generate-schema-archive-xsd" description="Generate DFXP's XSD Schema archive." depends="validate-schema-xsd">
        <zip destfile="${xsd.dir}/schema.zip">
            <fileset dir="${xsd.dir}">
                <include name="*.xsd"/>
            </fileset>
        </zip>
    </target>

    <target name="validate-schemas" description="Validate DFXP schemas" depends="validate-schema-rnc, validate-schema-xsd"/>

    <target name="generate-schema-archives" description="Generate DFXP schema archives" depends="generate-schema-archive-rnc, generate-schema-archive-xsd"/>

    <target name="validate-profile-transformation" description="Validates transformation profile.">
        <java fork="true" jar="${jing.jar}">
            <arg value="-c"/>
            <arg value="${rnc.schema}"/>
            <arg value="${profiles.dir}/dfxp-presentation.xml"/>
        </java>
    </target>

    <target name="validate-profile-presentation" description="Validates presentation profile.">
        <java fork="true" jar="${jing.jar}">
            <arg value="-c"/>
            <arg value="${rnc.schema}"/>
            <arg value="${profiles.dir}/dfxp-presentation.xml"/>
        </java>
    </target>

    <target name="validate-profile-full" description="Validates full profile.">
        <java fork="true" jar="${jing.jar}">
            <arg value="-c"/>
            <arg value="${rnc.schema}"/>
            <arg value="${profiles.dir}/dfxp-full.xml"/>
        </java>
    </target>

    <target name="validate-profiles"
	    depends="validate-profile-transformation,validate-profile-presentation,validate-profile-full"/>

    <target name="validate-example-1" description="Validates Example 1.">
        <!-- validate using RNC schema -->
        <java fork="true" jar="${jing.jar}">
            <arg value="-c"/>
            <arg value="${rnc.schema}"/>
            <arg value="${examples.dir}/ex1.xml"/>
        </java>
        <!-- validate using XSD schema -->
        <schemavalidate fullchecking="true" warn="true">
          <schema namespace="http://www.w3.org/ns/ttml" file="${xsd.schema}"/>
          <fileset dir="${examples.dir}">
            <include name="ex3.xml"/>
          </fileset>
        </schemavalidate>
    </target>

    <target name="validate-example-3" description="Validates Example 3.">
        <!-- validate using RNC schema -->
        <java fork="true" jar="${jing.jar}">
            <arg value="-c"/>
            <arg value="${rnc.schema}"/>
            <arg value="${examples.dir}/ex3-all-elements.xml"/>
        </java>
        <java fork="true" jar="${jing.jar}">
            <arg value="-c"/>
            <arg value="${rnc.schema}"/>
            <arg value="${examples.dir}/ex3-all-styles.xml"/>
        </java>
        <!-- validate using XSD schema -->
        <schemavalidate fullchecking="true" warn="true">
          <schema namespace="http://www.w3.org/ns/ttml" file="${xsd.schema}"/>
          <fileset dir="${examples.dir}">
            <include name="ex3-all-elements.xml"/>
            <include name="ex3-all-styles.xml"/>
          </fileset>
        </schemavalidate>
    </target>

    <target name="validate-examples"
	    depends="validate-example-1, validate-example-3"/>

    <target name="validate-xsl" description="Validates all XML files.">
        <xmlvalidate lenient="true">
            <fileset dir="." includes="*.xsl"/>
        </xmlvalidate>
    </target>

    <target name="validate-svg" description="Validates all SVG files.">
        <xmlvalidate lenient="false" warn="yes">
            <fileset dir="." includes="*.svg"/>
        </xmlvalidate>
    </target>

    <target name="build-escapes" description="Generate escaped entites.">
      <apply executable="sed">
        <arg value="-f"/>
        <arg value="escape.sed"/>
	<fileset dir="${basedir}">
	  <patternset refid="escapable"/>
	</fileset>
	<redirector>
	  <outputmapper>
    	    <mapper type="glob" from="*" to="*.esc"/>
	  </outputmapper>
	</redirector>
      </apply>
    </target>

    <target name="validate-tt-specs" description="Validates all Timed Text spec files."
        depends="build-escapes">
        <xmlvalidate lenient="false" warn="yes" file="ttml1.xml"/>
    </target>

    <target name="validate-tt-specs-dont-build-escapes" description="Validates all Timed Text spec files.">
        <xmlvalidate lenient="false" warn="yes" file="ttml1.xml"/>
    </target>

    <target name="validate" depends="validate-schemas,validate-examples,validate-xsl,validate-svg,validate-tt-specs,validate-schema-rnc,validate-profiles"/>

    <target name="updateAcks"
        description="Update acknowledgements. Before running this, 
	update ackcurrent.xml via  and ackold.xml
	via http://www.w3.org/2000/09/dbwg/details?group=34314&amp;former=1&amp;public=1 .">
        <get src="http://www.w3.org/2000/09/dbwg/details?group=34314&amp;public=1" dest="ackcurrent.xml"/>
        <get src="http://www.w3.org/2000/09/dbwg/details?group=34314&amp;former=1&amp;public=1" dest="ackold.xml"/>
        <java fork="true" classname="net.sf.saxon.Transform">
            <classpath refid="saxon8.classpath"/>
            <arg value="-o"/>
            <arg value="acknowledgements-current.txt"/>
            <arg value="ackcurrent.xml"/>
            <arg value="generate-acknowledgements.xsl"/>
            <arg value="participating=1"/>
        </java>
        <java fork="true" classname="net.sf.saxon.Transform">
            <classpath refid="saxon8.classpath"/>
            <arg value="-o"/>
            <arg value="acknowledgements-old.txt"/>
            <arg value="ackold.xml"/>
            <arg value="generate-acknowledgements.xsl"/>
            <arg value="participating=0"/>
        </java>
    </target>

    <target name="html" description="Transforms xml into html.">
        <echo>Generating ttml1.html</echo>
        <java fork="true" classname="net.sf.saxon.Transform">
            <classpath refid="saxon8.classpath"/>
            <arg value="-o"/>
            <arg value="${html.dir}/${html.name}"/>
            <arg value="ttml1.xml"/>
            <arg value="${stylesheet}"/>
            <arg value="showAssertions=true"/>
        </java>    
    </target>

    <path id="diffmk.classpath">
        <pathelement location="${basedir}/diffmk.jar"/>
        <pathelement location="${basedir}/DiffMk.properties"/>
    </path>
    <target name="generateXMLdiff">
        <java classname="com.sun.xtc.diffmk.DiffMk" fork="true">
            <arg value="-doctype"/>
            <arg value="xmlspec"/>
            <arg value="-diff"/>
            <arg value="both"/>
            <arg value="-words"/>
            <arg value="tt-tr${last-public-draft}.xml"/>
            <arg value="ttml1.xml"/>
            <arg value="tt-diff${last-public-draft}.xml"/>
            <classpath path="diffmk.jar:DiffMk.properties"> </classpath>
        </java>
    </target>
    <target name="generateHTMLdiff">
        <java fork="true" classname="net.sf.saxon.Transform">
            <classpath refid="saxon8.classpath"/>
            <arg value="-o"/>
            <arg value="${html.dir}/tt-diff${last-public-draft}.html"/>
            <arg value="tt-diff${last-public-draft}.xml"/>
            <arg value="diffspec.xsl"/>
        </java>
    </target>
    <target name="postprocess-diff">
      <java fork="true" classname="net.sf.saxon.Transform">
            <classpath refid="saxon8.classpath"/>
            <arg value="-o"/>
            <arg value="temp-tt-diff${last-public-draft}.xml"/>
            <arg value="tt-diff${last-public-draft}.xml"/>
            <arg value="diff-postprocess.xsl"/>
        </java>
        <copy tofile="tt-diff${last-public-draft}.xml"
            file="temp-tt-diff${last-public-draft}.xml" overwrite="true"/>
        <delete file="temp-tt-diff${last-public-draft}.xml"/>
    </target>

    <target name="diff" depends="generateXMLdiff, postprocess-diff, generateHTMLdiff"/>

    <target name="changelog" description="Update the CVS change log to be added into the specification">
      <!--        <cvschangelog destfile="changelog.xml"/> -->
      <get src="http://www.w3.org/2000/06/webdata/xslt?xslfile=http%3A%2F%2Fwww.w3.org%2F2008%2F05%2Fcvswebrss.xsl&amp;xmlfile=http%3A%2F%2Fcgi.w3.org%2Fcgi-bin%2Ftidy%3FdocAddr%3Dhttp%253A%252F%252Fdev.w3.org%252Fcvsweb%252F2008%252Fws%252Ftt%252Fttml1.xml%26forceXML%3Don" dest="changelog.xml"/>
    </target>

    <target name="generate" description="Generate the specification without updating changelog and acknowledgments sections"
	    depends="generate-schema-archives,validate-tt-specs,html">
      <echo>WARNING: changelog.xml and acknowledgments.xml MAY be out of date. Use "main" target if necessary.</echo>
    </target>
    
    <target name="sg" description="Shortened generation of the specification without updating changelog and acknowledgments sections, but without rebuilding escapes."
	    depends="generate-schema-archives,validate-tt-specs-dont-build-escapes,html">
      <echo>WARNING: changelog.xml and acknowledgments.xml MAY be out of date. Use "main" target if necessary.</echo>
    </target>

    <property name="per.name" value="PER-ttaf1-dfxp-20130709"/>
    <property name="per.target" value="${basedir}/${per.name}"/>
    <target name="per-archive" description="Create PER Archive">
        <fail>
          <condition>
            <not>
              <resourcecount count="1">
                <fileset dir="." includes="${per.name}.html"/>
              </resourcecount>
            </not>
          </condition>
        </fail>
        <delete includeemptydirs="true" quiet="true">
          <fileset dir="${per.target}"/>
        </delete>
        <mkdir dir="${per.target}"/>
        <mkdir dir="${per.target}/images"/>
        <mkdir dir="${per.target}/rnc"/>
        <mkdir dir="${per.target}/xsd"/>
        <copy file="${per.name}.html" tofile="${per.target}/${per.name}.html"/>
        <copy todir="${per.target}/images">
          <fileset dir="${basedir}/images" includes="*.png"/>
        </copy>
        <copy file="${rnc.dir}/schema.zip" todir="${per.target}/rnc"/>
        <copy file="${xsd.dir}/schema.zip" todir="${per.target}/xsd"/>
        <zip destfile="${per.name}.zip">
          <fileset dir="${per.target}">
            <include name="**/*"/>
          </fileset>
        </zip>
        <delete includeemptydirs="true" quiet="true">
          <fileset dir="${per.target}"/>
        </delete>
    </target>

</project>
